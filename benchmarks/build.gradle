apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'protobuf'
apply plugin: 'application'
//apply plugin: "dependencyAnalysis"

evaluationDependsOn(':openmpi')
def mpiJar = file(project(':openmpi').ompiLocal.getAbsolutePath() +
                  "/lib/mpi.jar")

project.ext {
    scalaLangLevel = 'Scala 2.11.7'
    midonetVersion = "5.1-SNAPSHOT"
    midolmanJar = "${midonetPath}/midolman/build/libs/midolman-${midonetVersion}.jar"
    midoutilJar = "${midonetPath}/midonet-util/build/libs/midonet-util-${midonetVersion}.jar"
    midoclusterJar = "${midonetPath}/midonet-cluster/build/libs/midonet-cluster-${midonetVersion}.jar"
    midonsdbJar = "${midonetPath}/nsdb-${midonetVersion}.jar"

    midonetDeps = files("${midolmanJar}",
                        "${midonsdbJar}",
                        "${midoclusterJar}",
                        "${midoutilJar}")
}

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []

compileScala {
    dependsOn(project(':openmpi').tasks.getByName('build'))
}

jar {
 
    
    manifest {
        attributes 'Implementation-Title': 'Topology Benchmark Applications'
    }
    from {configurations.compile.collect {it.isDirectory()? it: zipTree(it)}} {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    //from {configurations.runtime.collect {it.isDirectory()? it: zipTree(it)}} {
    //    exclude "META-INF/*.SF"
    //    exclude "META-INF/*.DSA"
    //    exclude "META-INF/*.RSA"
    //}
}

dependencies {
    compile project(':openmpi')
    compile files("${mpiJar}")
    compile midonetDeps
    compile "org.scala-lang:scala-library:2.11.7"
    compile "org.scala-lang.modules:scala-parser-combinators_2.11:1.0.4"
    compile "com.typesafe.scala-logging:scala-logging_2.11:3.1.0"
    compile "com.typesafe:config:1.2.1"
    compile "org.codehaus.jackson:jackson-core-asl:1.9.3"
    compile "io.reactivex:rxjava:1.0.4"
    compile "com.typesafe.akka:akka-actor_2.11:2.3.6"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.3.2"
    compile "io.dropwizard.metrics:metrics-core:3.1.0"
    compile "io.dropwizard.metrics:metrics-ganglia:3.1.0"
    compile "org.infinispan:infinispan-commons:7.0.2.Final"
    compile "com.google.guava:guava:15.0"
    compile "com.google.inject:guice:3.0"
    compile "com.google.protobuf:protobuf-java:2.6.1"
    compile "commons-cli:commons-cli:1.2"
    compile "commons-configuration:commons-configuration:1.8"
    compile "io.reactivex:rxjava:1.0.0-rc.7"
    compile "javax.ws.rs:jsr311-api:1.1"
    compile "org.apache.commons:commons-lang3:3.3"
    compile "org.apache.curator:curator-framework:2.9.1"
    compile "org.apache.curator:curator-recipes:2.9.1"
    compile "org.scala-lang:scala-library:2.11.2"
    compile "org.apache.curator:curator-test:2.7.1"
    compile "org.jgroups:jgroups:3.6.6.Final"
    compile "com.lmax:disruptor:3.3.0"
    compile "io.netty:netty-all:4.0.27.Final"

    //compile "org.apache.kafka:kafka_2.11:0.8.2.1"
    //compile "org.apache.kafka:kafka-clients:0.8.2.1"
    //compile "com.yammer.metrics:metrics-core:2.2.0"
    //compile "com.101tec:zkclient:0.5"
    //compile files("${kafkajar1}")
    //compile files("${kafkajar2}")

    compile "org.slf4j:slf4j-api:1.7.7"
    //compile "ch.qos.logback:logback-classic:1.0.1"
    compile dependencies.create("org.apache.zookeeper:zookeeper:3.4.6") {
        exclude group: 'jline', module: 'jline'
        exclude group: 'javax.jms', module: 'javax.jms'
        exclude group: 'com.sun.jdmk', module: 'jmxtools'
        exclude group: 'com.sun.jmx', module: 'jmxri'
        exclude group: 'io.netty', module: 'netty'
    }

    //runtime midolmanDeps
    runtime "org.codehaus.jackson:jackson-core-asl:1.9.3"
    runtime "org.codehaus.jackson:jackson-mapper-asl:1.9.3"

    testCompile "junit:junit:4.11"
}
