//
// TODO: Open MPI depends on a series of tools and libraries;
//       they should be specified somehow in the gradle file...
// Until then, this is a non-exhaustive list:
//   perl
//   bash
//   pkg-config
//   autotools
//   autoconf
//   automake
//   libldtl
//   libtool
//   flex
//   make
//   m4
//   gcc
//   jdk
//   tar
//   svn
//   svnversion
//

apply plugin: 'base'

defaultTasks 'build'

project.ext {
    ompiRepo     = file("ompi-trunk")
    ompiPrefix   = file("/opt/openMPI")
    ompiDestDir  = file("${buildDir}/install")
    ompiLocal    = file("${ompiDestDir}" + "${ompiPrefix}")
    ompiVersion  = file("${buildDir}/ompi-version")
    ompiBuild    = file("${buildDir}/ompi-build")
    ompiExamples = file("${buildDir}/ompi-examples")

    mpirunWrapper = file("${buildDir}/mpirun_wrapper.sh")
    mpiWrapper = file("${buildDir}/mpi_wrapper.sh")
}

task update {
    outputs.file(ompiRepo)
    doLast {
        exec {
            workingDir = ompiRepo
            commandLine = ["svn", "update"]
        }
    }
}

task setup  {
    inputs.file(file("${ompiRepo}/.svn"))
    outputs.files(file("${ompiRepo}/configure"),
                  file("${ompiRepo}/config/opal_get_version.sh"))
    doLast {
        exec {
            workingDir = ompiRepo
            commandLine = ["./autogen.pl"]
        }
    }
}

task version (dependsOn: 'setup') {
    inputs.files(file("${ompiRepo}/configure"),
                 file("${ompiRepo}/config/opal_get_version.sh"),
                 file("${ompiRepo}/VERSION"))
    outputs.file(ompiVersion)
    doLast {
        ompiVersion.getParentFile().mkdirs()
        delete(ompiVersion)
        def versionData = new FileOutputStream(ompiVersion)
        exec {
            commandLine = ["${ompiRepo}/config/opal_get_version.sh",
                           "${ompiRepo}/VERSION", "--full"]
            standardOutput = versionData
        }
    }
}

task config (dependsOn: 'version') {
    inputs.file(ompiVersion)
    outputs.files(file("${ompiBuild}/Makefile"),
                  file("${ompiBuild}/ompi/Makefile"),
                  file("${ompiBuild}/opal/Makefile"),
                  file("${ompiBuild}/orte/Makefile"),
                  file("${ompiBuild}/oshmem/Makefile"))
    doLast {
        delete(ompiBuild)
        ompiBuild.mkdirs()
        exec {
            workingDir = ompiBuild
            commandLine = ["${ompiRepo}/configure", "--prefix=${ompiPrefix}",
                           "--enable-mpi-java", "--enable-oshmem-java"]
        }
    }
}

task assemble (overwrite: true, dependsOn: 'config') {
    inputs.file(file("${ompiBuild}/Makefile"))
    outputs.files(file("${ompiBuild}/ompi/.libs"),
                  file("${ompiBuild}/opal/.libs"),
                  file("${ompiBuild}/orte/.libs"),
                  file("${ompiBuild}/oshmem/.libs"))
    doLast {
        exec {
            workingDir = ompiBuild
            commandLine = ["make"]
        }
    }
}

task check (dependsOn: 'assemble') {
    inputs.files(file("${ompiBuild}/ompi/.libs"),
                 file("${ompiBuild}/opal/.libs"),
                 file("${ompiBuild}/orte/.libs"),
                 file("${ompiBuild}/oshmem/.libs"))
    doLast {
        // Some tests are broken/unmantained, so a 'make check' will likely fail
        // Manually run individual working tests instead
        def maintainedTests = []
        // def maintainedTests = ["test/support"]
        maintainedTests.each { testDir ->
            exec {
                workingDir = "${ompiBuild}/${testDir}"
                commandLine = ["make", "check"]
            }
        }
    }
}

task build (dependsOn: 'check') {
    inputs.file(ompiBuild)
    outputs.files(ompiLocal, mpiWrapper, mpirunWrapper)
    doLast {
        delete(ompiDestDir)
        delete(mpiWrapper)
        delete(mpirunWrapper)
        exec {
            workingDir = ompiBuild
            commandLine = ["make", "DESTDIR=${ompiDestDir}", "install"]
        }

        mpiWrapper.getParentFile().mkdirs()
        def localEnv = new PrintWriter(mpiWrapper)
        localEnv.println("#!/bin/bash")
        localEnv.println("OMPI_PATH=${ompiLocal}")
        localEnv.println("export OPAL_DESTDIR=${ompiDestDir}")
        localEnv.println("export PATH=\$OMPI_PATH/bin:\$PATH")
        localEnv.println(
                "export LD_LIBRARY_PATH=\$OMPI_PATH/lib:\$LD_LIBRARY_PATH")
        localEnv.println(
                "export CLASSPATH=\$OMPI_PATH/lib/mpi.jar" +
                ":\$OMPI_PATH/lib/shmem.jar" +
                ":\$CLASSPATH")
        localEnv.println("\$@")
        localEnv.flush()
        localEnv.close()
        mpiWrapper.setExecutable(true, false)

        mpirunWrapper.getParentFile().mkdirs()
        def localMpiRun = new PrintWriter(mpirunWrapper)
        localMpiRun.println("#!/bin/bash")
        localMpiRun.println(
                "${mpiWrapper} mpirun --bind-to none -prefix ${ompiLocal} \$@")
        localMpiRun.flush()
        localMpiRun.close()
        mpirunWrapper.setExecutable(true, false)
    }
}

task examples (dependsOn: 'build') {
    inputs.files(ompiLocal)
    outputs.files(ompiExamples,
            "${ompiExamples}/connectivity_c",
            "${ompiExamples}/Hello.class",
            "${ompiExamples}/Ring.class",
    )
    doLast {
        ompiExamples.mkdirs()
        copy {
            from "${ompiRepo}/examples/"
            into ompiExamples
        }
        exec {
            workingDir = ompiExamples
            commandLine = ["${mpiWrapper}", "make"]
        }
    }
}

task ex_connectivity_c (dependsOn: 'examples') {
    inputs.files("${ompiExamples}/connectivity_c")
    doLast {
        exec {
            workingDir = ompiExamples
            commandLine = ["${mpirunWrapper}", "-np", "2",
                           "connectivity_c"]
        }
    }
}

task ex_hello_java (dependsOn: 'examples') {
    inputs.files("${ompiExamples}/Hello.class")
    doLast {
        exec {
            workingDir = ompiExamples
            commandLine = ["${mpirunWrapper}", "-np", "2",
                           "java", "-cp", ".", "Hello"]
        }
    }
}

task ex_ring_java (dependsOn: 'examples') {
    inputs.files("${ompiExamples}/Ring.class")
    doLast {
        exec {
            workingDir = ompiExamples
            commandLine = ["${mpirunWrapper}", "-np", "2",
                           "java", "-cp", ".", "Ring"]
        }
    }
}
